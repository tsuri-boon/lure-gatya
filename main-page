<!DOCTYPE html>
<html lang="ja">
<head>
   <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
<meta charset="UTF-8" />
<title>本日のオススメルアーメーカー</title>
<style>
  body {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    text-align: center;
    padding: 30px auto;
    background: #fafafa;
    margin-top: 30px;
  }
  #genre {
    margin-top: 10px;
    margin-bottom: 20px;
    padding: 10px 25px;
    font-size: 18px;
  }

  #slot-container {
    position: relative;
    margin: 0 auto;
    width: 350px;
    height: 100px;       /* 表示枠の高さ */
    overflow: hidden;
    border: 3px solid #333;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgb(0 0 0 / 0.2);
    background: linear-gradient(180deg, #f9f9f9, #ddd);
  }
  #slot {
    display: flex;
    flex-direction: column;
    will-change: transform;
  }
  
  .slot-item {
    height: 100px;       /* アイテムの高さを枠と同じに */
    line-height: 100px;  /* テキスト縦中央 */
    font-size: 30px;
    border-bottom: 1px solid #bbb;
    margin: 0;           /* マージンを絶対にゼロに */
    padding: 0;          /* パディングもゼロ */
    user-select: none;
    box-sizing: border-box;
  }

  button {
    margin-top: 40px;
    padding: 12px 50px; /* 横幅アップ */
    font-size: 22px;
    border: none;
    border-radius: 8px;
    background-color: #f85f36;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  button:hover:not(:disabled) {
    background-color: #d84b2d;
  }
  button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  #spin {
    margin-top: 50px;
    padding: 10px 25px;
    font-size: 18px;
    cursor: pointer;
  }
  #result {
    margin-top: 25px;
    font-weight: bold;
    font-size: 20px;
  }
  
</style>
</head>
<body>
  <h1>今日のルアーガチャ</h1>

  <select id="genre">
  <option value="">ジャンルを選んでください</option>
  <option value="シーバス">シーバス</option>
  <option value="ショアジギング">ショアジギング</option>
  <option value="アジング">アジング</option>
  </select>
  
  <div id="slot-container">
    <div id="slot"></div>
  </div>

  <button id="spin">ここをクリック！</button>

  <div id="result"></div>

<script>
 let makersData = {};
 let filteredMakers = [];

fetch('lure_data_ex2.json')
  .then(response => response.json())
  .then(data => {
    makersData = data;
    // 初期はルアーが1つ以上あるメーカーのみ
    filteredMakers = data.filter(maker =>
      maker.lures && maker.lures.length > 0
    );
    createSlotItems();
  });

  const genreSelect = document.getElementById("genre");
  genreSelect.addEventListener("change", function() {
  const selectedGenre = this.value;
  if (selectedGenre === "") {
    // 全メーカー対象（ルアーが1つでもある場合のみ）
    filteredMakers = makersData.filter(maker =>
      maker.lures && maker.lures.length > 0
    );
  } else {
    // 選んだジャンルのルアーを1つでも持つメーカーのみ抽出
    filteredMakers = makersData.filter(maker =>
      maker.lures &&
      maker.lures.some(lure => Array.isArray(lure.genre) && lure.genre.includes(selectedGenre))
    );
  }
  createSlotItems();
});

  const slot = document.getElementById("slot");
  const spinBtn = document.getElementById("spin");
  const result = document.getElementById("result");

  const slotHeight = 100;           // アイテムの高さ(px)
  const containerHeight = 100;      // スロット枠の高さ(px)
  const duration = 4000;
  let spinning = false;
  // セッションストレージに保存された結果があれば再表示
const saved = sessionStorage.getItem("selectedLure");
if (saved) {
  const { selected, lure } = JSON.parse(saved);
  result.innerHTML = `
    <div> メーカー：${selected.maker} </div>
    <div><a href="${selected.url}" target="_blank">${selected.url}</a></div>
    <div style="margin-top: 20px;"></div>
    <div> おすすめルアー：${lure.name}</div>
    <div style="margin-top: 10px;">${lure.image.replace(/height="\d+"/)}</div>
    <div style="margin-top: 10px;">${lure.link}</div>
  `;
}

  let fullList = [];
  function shuffle(array) {
    const newArr = [...array];
    for(let i=newArr.length-1; i>0; i--) {
      const j = Math.floor(Math.random()*(i+1));
      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];
    }
    return newArr;
  }

  function createSlotItems() {
    slot.innerHTML = "";
    fullList = [];
    for(let i=0; i<10; i++) {
      const shuffled = shuffle(filteredMakers);
      fullList.push(...shuffled);
    }
    fullList.forEach(name => {
      const div = document.createElement("div");
      div.className = "slot-item";
      div.textContent = name.maker;
      slot.appendChild(div);
    });
  }

  spinBtn.addEventListener("click", () => {
    if(spinning) return;
    if(filteredMakers.length === 0) {
    result.textContent = "調整中";
    return;
  }
    spinning = true;
    result.textContent = "回転中...";
    spinBtn.disabled = true;

    // transformをリセット
    slot.style.transition = "none";
    slot.style.transform = "translateY(0)";

    // すぐにリレンダリングしてから開始するための待機
    setTimeout(() => {
      createSlotItems();

      // 5周目スタート + ランダムな停止位置
      const baseRound = filteredMakers.length * 5;
      const randomIndex = Math.floor(Math.random() * filteredMakers.length);
      const visibleIndex = baseRound + randomIndex;

      // 真ん中に止まるよう計算
      const offset = visibleIndex * slotHeight - (containerHeight / 2) + (slotHeight / 2);

      // アニメーション開始
      slot.style.transition = `transform ${duration}ms cubic-bezier(0.22,1,0.36,1)`;
      slot.style.transform = `translateY(-${offset}px)`;

      // アニメーション終了後処理
      setTimeout(() => {
        spinning = false;
        spinBtn.disabled = false;
        const selected = fullList[visibleIndex]; // 選ばれたメーカー
        const selectedGenre = genreSelect.value;
        const lures = (selected.lures || []).filter(lure =>
        Array.isArray(lure.genre) && lure.genre.includes(selectedGenre)
        );
        const randomLure = lures.length > 0 ? lures[Math.floor(Math.random() * lures.length)] : null;

        // 左側から発射
        confetti({
        particleCount: 80,
        angle: 60,             // 左から右上に向けて発射
        spread: 55,
        origin: { x: 0.25, y: 0.6 } // 左端
        });

        // 右側から発射
        confetti({
        particleCount: 80,
        angle: 120,            // 右から左上に向けて発射
        spread: 55,
        origin: { x: 0.75, y: 0.6 } // 右端
        });

     // セッションストレージに保存
// 表示処理
  if (randomLure) {
   // ランダムで選ばれたルアー（randomLure）が存在している前提
    const makerName = selected.maker;
    const makerNameJap = selected.maker_jap ? `（${selected.maker_jap}）` : "";

    // スロットの結果表示に日本語名を含める
    result.innerHTML = `<h2>${makerName}${makerNameJap}</h2>`;

    // 他のルアー情報（名前、画像、リンクなど）を続けて表示
    result.innerHTML += `
    <p>ルアー名: ${randomLure.name}</p>
    <div style="margin-top: 10px;">${randomLure.image.replace(/height="\d+"/)}</div>
    <div style="margin-top: 10px;">${selected.link}</div>
    `;
  } else {
    result.innerHTML = `
      <div>メーカー：${selected.maker}</div>
      <div><a href="${selected.url}" target="_blank">${selected.url}</a></div>
      <div style="margin-top: 20px;">おすすめルアー情報はありません</div>
      <div style="margin-top: 10px;">${selected.link}</div>
    `;
  }
}, duration + 100);
    }, 50);
  });
</script>
</body>
</html>
